// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by instructionTypesan and Schocken, MIT Press.
// File nAMRege: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing uinstructionTypet), consisting of an ALU,
 * two registers nAMReged A and D, and a progrAMReg counter nAMReged PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAMReg[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // progrAMReg (reset==1) or continue executing
                         // the current progrAMReg (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // sort c or a instruction
    Not(in=instruction[15],out=instructionType);
	Mux16(a=outtM,b=instruction,sel=instructionType,out=i);

    // input to a register
    Or(a=instructionType,b=instruction[5],out=intoA);
	ARegister(in=i,load=intoA,out=A,out[0..14]=addressM);

    // sort input to alu
    // a record or memoy
    And(a=instruction[15],b=instruction[12],out=AorM);
	Mux16(a=A,b=inM,sel=AorM,out=AMReg);

    // ALU 
    ALU(x=D,y=AMReg,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outtM,out=outM,zr=zr,ng=ng);

    // D Register
	And(a=instruction[15],b=instruction[4],out=intoD);
	DRegister(in=outtM,load=intoD,out=D);

    // write to memory
    And(a=instruction[15],b=instruction[3],out=writeM);

    // PC with jump test
    Not(in=ng,out=pos);
	Not(in=zr,out=nzr);
	And(a=instruction[15],b=instruction[0],out=jgt);
	And(a=pos,b=nzr,out=posnzr);
	And(a=jgt,b=posnzr,out=ld1);

	And(a=instruction[15],b=instruction[1],out=jeq);
	And(a=jeq,b=zr,out=ld2);

	And(a=instruction[15],b=instruction[2],out=jlt);
	And(a=jlt,b=ng,out=ld3);

	Or(a=ld1,b=ld2,out=ldt);
	Or(a=ld3,b=ldt,out=ld);

	PC(in=A,load=ld,inc=true,reset=reset,out[0..14]=pc);



}